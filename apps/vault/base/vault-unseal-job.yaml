# Vault 自动解封 Job
# 用于在 Vault 重启后自动解封
apiVersion: batch/v1
kind: Job
metadata:
  name: vault-unseal
  namespace: vault
  labels:
    app.kubernetes.io/name: vault-unseal
    app.kubernetes.io/part-of: vault-system
    app.kubernetes.io/component: unseal
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: vault-unseal
    spec:
      restartPolicy: OnFailure
      serviceAccountName: vault-unseal
      
      containers:
        - name: vault-unseal
          image: hashicorp/vault:1.20.0
          command: ["/bin/sh"]
          args:
            - -c
            - |
              set -e
              
              # 等待 Vault 服务可用
              echo "等待 Vault 服务启动..."
              until vault status 2>/dev/null; do
                echo "Vault 尚未就绪，等待 5 秒..."
                sleep 5
              done
              
              # 检查 Vault 是否已经解封
              if ! vault status | grep -q "Sealed.*true"; then
                echo "Vault 已经解封，无需操作"
                exit 0
              fi
              
              echo "Vault 处于密封状态，开始解封..."
              
              # 检查解封密钥是否存在
              if ! kubectl get secret vault-unseal-keys -n vault >/dev/null 2>&1; then
                echo "错误：找不到解封密钥 Secret。请先运行 vault-init Job。"
                exit 1
              fi
              
              # 获取解封密钥
              UNSEAL_KEY_1=$(kubectl get secret vault-unseal-keys -n vault -o jsonpath='{.data.key1}' | base64 -d)
              UNSEAL_KEY_2=$(kubectl get secret vault-unseal-keys -n vault -o jsonpath='{.data.key2}' | base64 -d)
              UNSEAL_KEY_3=$(kubectl get secret vault-unseal-keys -n vault -o jsonpath='{.data.key3}' | base64 -d)
              
              # 解封 Vault（需要 3 个密钥）
              echo "使用密钥 1 解封..."
              vault operator unseal "$UNSEAL_KEY_1"
              
              echo "使用密钥 2 解封..."
              vault operator unseal "$UNSEAL_KEY_2"
              
              echo "使用密钥 3 解封..."
              vault operator unseal "$UNSEAL_KEY_3"
              
              # 验证解封状态
              if vault status | grep -q "Sealed.*false"; then
                echo "Vault 解封成功！"
              else
                echo "错误：Vault 解封失败"
                exit 1
              fi
          
          env:
            - name: VAULT_ADDR
              value: "http://vault.vault.svc.cluster.local:8200"
          
          securityContext:
            runAsNonRoot: true
            runAsUser: 100
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL

---
# ServiceAccount for the unseal job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-unseal
  namespace: vault
  labels:
    app.kubernetes.io/name: vault-unseal
    app.kubernetes.io/part-of: vault-system
automountServiceAccountToken: true

---
# Role for the unseal job
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vault-unseal
  namespace: vault
  labels:
    app.kubernetes.io/name: vault-unseal
    app.kubernetes.io/part-of: vault-system
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]

---
# RoleBinding for the unseal job
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vault-unseal
  namespace: vault
  labels:
    app.kubernetes.io/name: vault-unseal
    app.kubernetes.io/part-of: vault-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vault-unseal
subjects:
  - kind: ServiceAccount
    name: vault-unseal
    namespace: vault
