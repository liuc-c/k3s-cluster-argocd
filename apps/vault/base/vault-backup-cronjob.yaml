# Vault 备份 CronJob
# 定期备份 Vault 数据和配置
apiVersion: batch/v1
kind: CronJob
metadata:
  name: vault-backup
  namespace: vault
  labels:
    app.kubernetes.io/name: vault-backup
    app.kubernetes.io/part-of: vault-system
    app.kubernetes.io/component: backup
spec:
  # 每天凌晨 2 点执行备份
  schedule: "0 2 * * *"
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: vault-backup
        spec:
          restartPolicy: OnFailure
          serviceAccountName: vault-backup
          
          containers:
            - name: vault-backup
              image: hashicorp/vault:1.20.0
              command: ["/bin/sh"]
              args:
                - -c
                - |
                  set -e
                  
                  # 等待 Vault 服务可用
                  echo "等待 Vault 服务启动..."
                  until vault status 2>/dev/null; do
                    echo "Vault 尚未就绪，等待 5 秒..."
                    sleep 5
                  done
                  
                  # 检查 Vault 是否已解封
                  if vault status | grep -q "Sealed.*true"; then
                    echo "错误：Vault 处于密封状态，无法执行备份"
                    exit 1
                  fi
                  
                  # 获取根 token
                  if ! kubectl get secret vault-root-token -n vault >/dev/null 2>&1; then
                    echo "错误：找不到根 token Secret"
                    exit 1
                  fi
                  
                  ROOT_TOKEN=$(kubectl get secret vault-root-token -n vault -o jsonpath='{.data.token}' | base64 -d)
                  export VAULT_TOKEN="$ROOT_TOKEN"
                  
                  # 创建备份目录
                  BACKUP_DATE=$(date +%Y%m%d_%H%M%S)
                  BACKUP_DIR="/backup/vault_backup_$BACKUP_DATE"
                  mkdir -p "$BACKUP_DIR"
                  
                  echo "开始备份 Vault 数据..."
                  
                  # 备份 KV secrets
                  echo "备份 KV secrets..."
                  vault kv list -format=json secret/ > "$BACKUP_DIR/kv_list.json" 2>/dev/null || echo "[]" > "$BACKUP_DIR/kv_list.json"
                  
                  # 备份策略
                  echo "备份策略..."
                  vault policy list -format=json > "$BACKUP_DIR/policies.json"
                  
                  # 备份认证方法
                  echo "备份认证方法..."
                  vault auth list -format=json > "$BACKUP_DIR/auth_methods.json"
                  
                  # 备份 secrets 引擎
                  echo "备份 secrets 引擎..."
                  vault secrets list -format=json > "$BACKUP_DIR/secrets_engines.json"
                  
                  # 创建备份元数据
                  cat > "$BACKUP_DIR/metadata.json" <<EOF
                  {
                    "backup_date": "$BACKUP_DATE",
                    "vault_version": "$(vault version | head -1)",
                    "backup_type": "automated",
                    "cluster_name": "vault-cluster"
                  }
                  EOF
                  
                  # 压缩备份
                  cd /backup
                  tar -czf "vault_backup_$BACKUP_DATE.tar.gz" "vault_backup_$BACKUP_DATE/"
                  rm -rf "vault_backup_$BACKUP_DATE/"
                  
                  # 清理旧备份（保留最近 7 天）
                  find /backup -name "vault_backup_*.tar.gz" -mtime +7 -delete
                  
                  echo "备份完成：vault_backup_$BACKUP_DATE.tar.gz"
                  ls -la /backup/
              
              env:
                - name: VAULT_ADDR
                  value: "http://vault.vault.svc.cluster.local:8200"
              
              securityContext:
                runAsNonRoot: true
                runAsUser: 100
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: true
                capabilities:
                  drop:
                    - ALL
              
              volumeMounts:
                - name: backup-storage
                  mountPath: /backup
                - name: tmp
                  mountPath: /tmp
          
          volumes:
            - name: backup-storage
              persistentVolumeClaim:
                claimName: vault-backup-pvc
            - name: tmp
              emptyDir: {}

---
# PVC for backup storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: vault-backup-pvc
  namespace: vault
  labels:
    app.kubernetes.io/name: vault-backup
    app.kubernetes.io/part-of: vault-system
    app.kubernetes.io/component: storage
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# ServiceAccount for the backup job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: vault-backup
  namespace: vault
  labels:
    app.kubernetes.io/name: vault-backup
    app.kubernetes.io/part-of: vault-system
automountServiceAccountToken: true

---
# Role for the backup job
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: vault-backup
  namespace: vault
  labels:
    app.kubernetes.io/name: vault-backup
    app.kubernetes.io/part-of: vault-system
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get", "list"]

---
# RoleBinding for the backup job
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: vault-backup
  namespace: vault
  labels:
    app.kubernetes.io/name: vault-backup
    app.kubernetes.io/part-of: vault-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: vault-backup
subjects:
  - kind: ServiceAccount
    name: vault-backup
    namespace: vault
